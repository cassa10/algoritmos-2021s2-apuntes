Algortimos clase 21 09 2021
----------------------------

TP3 Programacion Dinamica

Ejercicio 2:

Numero combinatorio

(n) = 	n! / (m! * (n-m)!)
(m)

Def
Caso Inductivo:
(n) = (n-1) + (n-1)
(m)	  (m-1)   ( m )

CasoBase:
(n) = 1
(0)


----------
Naive
----------

func comb(n,m):
	if m == 0:
		return 1
	if n > m && m > 0: 
		return comb(n-1,m-1) + comb(n-1, m)
	return 1


-----------------
PD - Top Down
-----------------

NOTA: Una matrix es mas eficiente que un Map (diccionario)

func initPD(n, m):
	matrix = Matrix(n,m) //Instancia None en toda las posiciones
	return combPD(matrix, n, m)

func combPD(matrix, n, m):
	if m == 0:
		return 1
	if n > m && m > 0: 
		return combPDIf(matrix, n-1, m-1) + combPDIf(matrix, n-1, m)
	return 1


func combPDIf(matrix, n, m):
	if matrix[n][m] == None:
		matrix[n][m] = combPD(n,m)
	return matrix[n][m]


-----------------
PD - Bottom Up
-----------------

M[i,j] = (i)
		 (j)

combBU(n, m):
	matrix = Matrix(n, m, 1) #Llena toda la matrix con "1" (Caso Base)

	for i in range(1, n): 
		for j in range(1, i): //j < i
			matrix[i][j] = matrix[i-1][j-1] + matrix[i-1][j]

	return matrix[n][m]




---------------
EJERCICIO 3
---------------

#n y m son las dimensiones de una submatrix que solo al principio va a ser igual a las dimenciones de mi matrix original.

----------
TOP DOWN
-----------

caminoMinTD(matrix, n, m):
	cache = Matrix(n, m , None)
	if n is 1 and m is 1:
		return matrix[n-1][m-1]

	if n is 1:
		return caminoMinCache(matrix, n, m-1, cache) + matrix[n-1][m-1]

	if m is 1:
		return caminoMinCache(matrix, n-1, m, cache) + matrix[n-1][m-1]


	return min(
		caminoMinCache(matrix, n-1, m, cache), 
		caminoMinCache(matrix, n, m-1, cache)
	) + matrix[n-1][m-1]



caminoMinCache(matrix, n, m, cache):
	if cache[n, m] is None:
		cache[n, m] = caminoMinTD(matrix, n, m, cache)
	return cache[n, m]


-----------
BOTTOM UP
-----------

caminoMinBU(matrix, n, m):
	cache = matrix.Copy
	paths = Matrix(n, m, None)

	for i in range(0, n-1):
		for j in range(0, m-1):
			if i is 0 and j is 0:
				paths[i][j] = [(i, j)]
				continue #continue with next iteration

			if i is 0:
				cache[i][j] = cache[i][j] + cache[i][j-1]
				paths[i][j] =  paths[i][j-1].push((i, j))
				continue #continue with next iteration

			if j is 0:
				cache[i][j] = cache[i][j] + cache[i-1][j]
				paths[i][j] = paths[i-1][j].push((i, j))
				continue #continue with next iteration

			x = cache[i][j-1]
			y = cache[i-1][j]
			cache[i][j] = cache[i][j] + min(x, y)

			if x < y:
				paths[i][j] = paths[i][j-1].push((i, j))
			else:
				paths[i][j] = paths[i-1][j].push((i, j))

			
	return (cache[n-1][m-1],paths[n-1][m-1])
