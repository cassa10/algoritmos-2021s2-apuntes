====================================================================
Practica 2 - Divide and Conquer
====================================================================
Ejercicio1:

Escriba un algoritmo de Divide & Conquer que determine si un arreglo es más a la izquierda, donde “más a la izquierda” significa
que:
	• La suma de los elementos de la mitad izquierda supera a la suma de los de la mitad derecha.
	• Cada una de las mitades es a su vez “más a la izquierda”.
Por ejemplo, el arreglo [8, 6, 7, 4, 5, 1, 3, 2] es “más a la izquierda”, pero [8, 4, 7, 6, 5, 1, 3, 2] no lo es.

Solucion
--------

def masALaIzquierda(arreglo A):
	
	longitud = len(arreglo)
	if longitud == 1:
		return true
	end

	mitad =	longitud / 2
	leftLs = arreglo[:mitad]
	rightLs = arreglo[mitad:]
	
	if sum(leftLs) <= sum(rightLs):
		return false
	end

	return masALaIzquierda(leftLs)
end

def sum(arreglo A):
	int sum = 0
	for x in A:
		sum += x
	end
	return sum 
end

====================================================================
====================================================================

Ejercicio 2:
-------------

Tenemos un arreglo a = [a1, a2, ..., an] de n enteros distintos (positivos y negativos) en orden estrictamente creciente. Queremos
determinar si existe una posición i tal que ai = i. 

Por ejemplo, dado el arreglo a = [−4, −1, 2, 4, 7], i = 4 es esa posición.

Diseñar un algoritmo de Divide & Conquer eficiente (de complejidad de orden estrictamente menor que lineal en n) que resuelva
el problema.


Solucion
--------

T(n) = 2T(n/2) + O(1)

\Theta(log(n))


def existSameIndexAndValue(array A, int offset = 0):

	int size = len(array)
	
	if size == 1:
		return (offset + 1) == array[0]
	end

	int halfIndex = size / 2
	halfElem = array[halfIndex]

	currentIndex = halfIndex + offset
	switch:
		case halfElem == currentIndex: 
			return true
		case halfElem < currentIndex:	
			return existSameIndexAndValue(array[halfIndex:],halfIndex)
		default:
			return existSameIndexAndValue(array[:halfIndex], 0)
	end

end


====================================================================
====================================================================

Ejercicio 3
------------

Encuentre un algoritmo para calcular a^b en tiempo logarítmico en b. Piense cómo reutilizar los resultados ya calculados.


def 








Ejercicio 5
------------

Suponga que se tiene un método potencia(A, n) que, dada un matriz cuadrada A de orden 4 × 4 y un número n, computa la
matriz An. Dada una matriz cuadrada A de orden 4 × 4 y un número natural n que es potencia de 2 (es decir, n = 2k para
alguna k ≥ 1), desarrollar, utilizando la técnica de Divide & Conquer y el método potencia, un algoritmo que permita calcular:
A
1 + A
2 + . . . + A
n
Calcule el número de veces que el algoritmo propuesto aplica el método potencia. Si no es estrictamente menor que O(n),
resuelva el ejercicio nuevamente



Solucion
---------

def sumaDeExponenciales(matrix A, int n):
 